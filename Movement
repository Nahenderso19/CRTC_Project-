import sys
x = 12
y = 12
def move():
    '''''''''''''''''''''''''''''''''''''''''''''''''''
    The FIRST block of code is initializing the player position
    from where it was initially defined (see line 2 and 3). It
    also is asks for the direction you wan to move in, and how
    many steps you want to take.
    -------------------------------
    The SECOND block of code takes the user input from the first
    block and applies it to change the x and y values. This is
    where the main principle for the movement system is displayed.
    This can also check for invalid input
    '''''''''''''''''''''''''''''''''''''''''''''''''''
    global x
    global y
    pos = (x, y)
    print "Current Position: " , pos
    print "Where to? DIRECTIONS: "
    directions = input("F = FORWARD, B = BACKWARD, L = LEFT, R = RIGHT: ")
    distance = int(input("How many steps?: "))
    
    if directions == "F":
      y = y + distance
      print "You move FORWARD", distance, "steps."
    elif directions == "B":
      y = y - distance
      print "You move BACKWARD", distance, "steps."
    elif directions == "L":
        x = x - distance
        print "You move LEFT", distance, "steps."
    elif directions == "R":
        x = x + distance
        print "You move RIGHT", distance, "steps."
    elif directions == "DEVMODE":
        print "DEV OVERIDE"
        if distance == 15:
            x = 15
            y = 15
        if distance == 20:
            x = 20
            y = 20
    else:
        print ("INVALID INPUT: Try again:")

    '''''''''''''''''''''''''''''''''''''''''''''''''''
    The following code in this function is for setting the room
    size and defining object positions (as well as repositioning
    the player in the event said character moves, or clips, into
    an object. I have also added in my own debugging errors, and
    a key for said errors and their meanings at the very bottom
    of the program.
    '''''''''''''''''''''''''''''''''''''''''''''''''''
    if x >= 26:
        x = 25
        print "You hit a wall."
    if x <= 0:
        x = 1
        print "You hit a wall."
    if y >= 26:
        y = 25
        print "You hit a wall."
    if y <= 0:
        y = 1
        print "You hit a wall."
        '''
    if directions == "L":
        print pos
        if pos == [(1, 1) or (1, 2) or (1, 3) or (1, 4) or (1, 5) or (1, 6) or (2, 1) or (2, 2) or (2, 3) or (2, 4) or (2, 5) or (2, 6) or (3, 1) or (3, 2) or (3, 3) or (3, 4) or (3, 5) or (3, 6)]:
            x = 4
            print "You hit a SHELF."
    elif directions == "B":
        y = 4
        print "You hit a SHELF."
    else:
        print "ERROR 01"
    
    print "......"
            '''
            
def posEvents():
    '''''''''''''''''''''''''''''''''''''''''''''''''''
    The following program holds all the info on pos events.This
    includes things such as puzzles, riddles, finding keys, etc.
    The first two are tests to make sure the underlying principle
    of how the code accomplishes its task works.
    '''''''''''''''''''''''''''''''''''''''''''''''''''
    if pos == (15, 15):
        print "Most unfortunate, you tripped on "
        print "a BANANA PEEL and broke your NECK"
        exit()
    if pos == (20, 20):
        print "For some reason you fell through the FLOOR. "
        print "I guess every RPG has its GLITCHES."
        exit()
    if pos == (1, 20):
        
        
        
for i in range(200):
    move()
    pos = (x, y)
    posEvents()
    


'''''''''''''''''''''''''''''''''''''''''''''''''''
ERROR 01 = This can mean the player has gone out of the
           "play area" and tried to re-enter it via a non
           collidable object. Or has used DEVMODE to
           teleport to an occupied space.
'''''''''''''''''''''''''''''''''''''''''''''''''''
